<!DOCTYPE html>
<html>
    <head>

    </head>
    <title>
     BVplacementKit
    </title>
         <!-- Favicon-->
        <link rel="icon" type="image/x-icon" href="images/favicon.ico" />
<link rel="stylesheet"  href="../css/dbms.css">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

    <body>
        
        <h1><u>DBMS TOP 50 INTERVIEW QUESTIONS</u></h1>  <img src="photo12.png ">
        
        <div class="container"  id="div1">
             <h1>INTODUCTION</h1>
           
              
                <fieldset  class="field1">
                    <legend>DBMS</legend>

                
                    A database management system (or DBMS) is essentially nothing more than a computerized data-keeping system.             
                    Provides an organized way of managing, retrieving, and storing from a collection of logically related information
           
                </fieldset>
                <fieldset>
                    <legend> Database and DBMS</legend>
                    A software application that interacts with databases, applications, and users to capture and analyze the required data. The data stored in the database can be retrieved, deleted and modified based on the clientâ€™s requirement.          
                </fieldset>
                <fieldset>
                    <legend>Advantages Of DBMS</legend>
                     <UL>
                         <li> Sharing of Data</li>
                         <li> Integrity constraints </li>
                <li> Redundancy control </li>
                <li> Data Independence </li>
                <li> Provide backup and recovery facility </li>

            </UL>
             
            </fieldset>
            
                
           

    </div>
      

        <div class="container"  id="div2">
        
          
       
           <fieldset>
               <legend>Checkpoint In DBMS</legend>

               The Checkpoint is a type of mechanism where all the previous logs are removed from the system and permanently stored in the storage disk.
               There are two ways which can help the DBMS in recovering and maintaining the ACID properties, and they are- maintaining the log of each transaction and maintaining shadow pages. 
            </fieldset>

           <fieldset>
            <legend> Checkpoint Occurence In DBMS</legend>

            A checkpoint is like a snapshot of the DBMS state. Using checkpoints, the DBMS can reduce the amount of work to be done during a restart in the event of subsequent crashes. Checkpoints are used for the recovery of the database after the system crash           </fieldset>
            <fieldset>
                <legend>Object-Oriented DBMS</legend>
 
                Uses small individual software called object to store pieces of data and the instructions for the actions to be done with the data.    </fieldset>
 
            <fieldset>
             <legend>  ACID Properties In DBMS</legend>
 
             Atomicity: Atomicity refers to those transactions which are completely successful or failed. Here each transaction refers to a single logical operation of a data. So, even if one part of any transaction fails, the entire transaction fails and the database state is left unchanged.<br>
             Consistency: Consistency ensures that the data must meet all the validation rules. In simple words,  you can say that your transaction never leaves the database without completing its state.<br>
             Isolation: The main goal of isolation is concurrency control.<br>
             Durability: Durability means that if a transaction has been committed, it will occur whatever may be the scenario.<br>

</fieldset>

        </div>
   <div class="container" id="div3">
  
      
   
       <fieldset>
           <legend> Transparent DBMS</legend>


           The transparent DBMS is a type of DBMS which keeps its physical structure hidden from users.         </fieldset>

       <fieldset>
        <legend> Unary Operations In Relational Algebra</legend>

        PROJECTION and SELECTION are the unary operations in relational algebra. Unary operations are those operations which use single operands     
    </fieldset>

     
      
   
       <fieldset>
           <legend> RDBMS</legend>
           RDBMS stands for Relational Database Management Systems. It is used to maintain the data records and indices in tables. RDBMS is the form of DBMS which uses the structure to identify and access data concerning the other piece of data in the database.              </fieldset>
       <fieldset>
           <legend> Types Of Database Languages</legend>
           Four types of database languages:  
           <UL>
            <li> Data Definition Language (DDL) e.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. </li>
            <li> Data Manipulation Language (DML) e.g., SELECT, UPDATE, INSERT, DELETE, etc.  </li>
            <li> DATA Control Language (DCL) e.g., GRANT and REVOKE. These commands are used for giving and removing the user access on the database. </li>
            <li> Transaction Control Language (TCL) e.g., COMMIT, ROLLBACK, and SAVEPOINT. </li>
            
        </UL>
           
           
       </fieldset>
       <fieldset>
        <legend> Data Model</legend>
        The Data model is specified as a collection of conceptual tools for describing data, data relationships, data semantics and constraints.   
        There is the number of data models: 

       <ul>
       <li> Hierarchical data model</li>
       <li>Network model</li>
       <li>Relational model</li>
       <li>Entity-Relationship model and so on.</li>
       </ul>
       </fieldset>

        <fieldset>
        <legend>Relation Schema and a Relation.</legend>
        A Relation Schema is specified as a set of attributes. It is also known as table schema. <BR>
        A relation is specified as a set of tuples. A relation is the set of related attributes with identifying key attributes <br>
        Let r be the relation which contains set tuples (t1, t2, t3, ..., tn). Each tuple is an ordered list of n-values t=(v1,v2, ...., vn).  </fieldset>
        <fieldset>
        <legend> Relationship</legend>
        The Relationship is defined as an association among two or more entities.
       
      </fieldset>
       
           
      

</div>



<div class="container"  id="div4">



<fieldset>
    <legend> Transparent DBMS</legend>


    The transparent DBMS is a type of DBMS which keeps its physical structure hidden from users.         </fieldset>

<fieldset>
 <legend> Unary Operations In Relational Algebra</legend>

 PROJECTION and SELECTION are the unary operations in relational algebra. Unary operations are those operations which use single operands     
</fieldset>




<fieldset>
    <legend> RDBMS</legend>
    RDBMS stands for Relational Database Management Systems. It is used to maintain the data records and indices in tables. RDBMS is the form of DBMS which uses the structure to identify and access data concerning the other piece of data in the database.              </fieldset>
<fieldset>
    <legend> Types Of Database Languages</legend>
    Four types of database languages:  
    <UL>
     <li> Data Definition Language (DDL) e.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. </li>
     <li> Data Manipulation Language (DML) e.g., SELECT, UPDATE, INSERT, DELETE, etc.  </li>
     <li> DATA Control Language (DCL) e.g., GRANT and REVOKE. These commands are used for giving and removing the user access on the database. </li>
     <li> Transaction Control Language (TCL) e.g., COMMIT, ROLLBACK, and SAVEPOINT. </li>
     
 </UL>
    
    
</fieldset>
       <fieldset>
            <legend> Data Model</legend>
       The Data model is specified as a collection of conceptual tools for describing data, data relationships, data semantics and constraints.   
 There is the number of data models: 

<ul>
<li> Hierarchical data model</li>
<li>Network model</li>
<li>Relational model</li>
<li>Entity-Relationship model and so on.</li>
</ul>
</fieldset>
 <fieldset>
 <legend>Relation Schema and a Relation.</legend>
 A Relation Schema is specified as a set of attributes. It is also known as table schema. <BR>
 A relation is specified as a set of tuples. A relation is the set of related attributes with identifying key attributes <br>
 Let r be the relation which contains set tuples (t1, t2, t3, ..., tn). Each tuple is an ordered list of n-values t=(v1,v2, ...., vn).  </fieldset>
<fieldset>
 <legend> Relationship</legend>
 The Relationship is defined as an association among two or more entities.

</fieldset>
</div>
 
     
   
<div class="container"  id="div5">



    <fieldset>
        <legend> Disadvantages Of File Processing Systems</legend>
    
    
        <UL>
            <li> Inconsistent </li>
            <li>Data redundancy </li>
            <li>Difficult in accessing data</li>
            <li>Concurrent access is not possible</li>
            <li>Limited data sharing</li>
            
        </UL>  
        </fieldset>  
    <fieldset>
     <legend>Data Abstraction</legend>
    
     Data abstraction in DBMS is a process of hiding irrelevant details from users.    </fieldset>
    
    
    
    
    <fieldset>
        <legend> Levels Of  Data Abstraction</legend>
        Physical level: It is the lowest level of abstraction. It describes how data are stored.<BR>

        Logical level: It is the next higher level of abstraction. It describes what data are stored in the database and what the relationship among those data is.<br>
        
        View level: It is the highest level of data abstraction. It describes only part of the entire database.<br>
        </fieldset>
            <fieldset>
        <legend> Types Of Database Languages</legend>
        Four types of database languages:  
        <UL>
         <li> Data Definition Language (DDL) e.g., CREATE, ALTER, DROP, TRUNCATE, RENAME, etc. </li>
         <li> Data Manipulation Language (DML) e.g., SELECT, UPDATE, INSERT, DELETE, etc.  </li>
         <li> DATA Control Language (DCL) e.g., GRANT and REVOKE. These commands are used for giving and removing the user access on the database. </li>
         <li> Transaction Control Language (TCL) e.g., COMMIT, ROLLBACK, and SAVEPOINT. </li>
         
     </UL>
        
        
    </fieldset>
           <fieldset>
                <legend> DDL</legend>
                Data Definition Language (DDL) is a standard for commands which defines the different structures in a database. Most commonly DDL statements are CREATE, ALTER, and DROP.
    
   
    </fieldset>
     <fieldset>
     <legend> DML</legend>
     DData Manipulation Language (DML) is a language that enables the user to access or manipulate data as organized by the appropriate data model. For example- SELECT, UPDATE, INSERT, DELETE   </fieldset>
     
     <fieldset>
     <legend> Type Of DML</legend>
      There are two types of DML:

      Procedural DML or Low level DML: It requires a user to specify what data are needed and how to get those data.<BR>

     Non-Procedural DML or High level DML:It requires a user to specify what data are needed without specifying how to get those data.<br>
    </fieldset>
    </div>

    <div class="container" id="div6">



        <fieldset>
            <legend> Relational Algebra</legend>
        
            Relational Algebra is a Procedural Query Language which contains a set of operations that take one or two relations as input and produce a new relationship.
            There are few fundamental operations of relational algebra:
            <UL>
                <li> select </li>
                <li> project </li>
                <li> set difference</li>
                <li> union</li>
                <li> rename</li>
                
            </UL>
        </fieldset>
            <fieldset>
         <legend>Relational Calculus</legend>
        
         Relational Calculus is a Non-procedural Query Language which uses mathematical predicate calculus instead of algebra. Relational calculus doesn't work on mathematics fundamentals such as algebra, differential, integration, etc. 
         There is two type of relational calculus:
         <UL>
            <li> Tuple relational calculus </li>
            <li> Domain relational calculus</li>
          
        </UL>
        </fieldset>
        
        <fieldset>
            <legend>Query Optimization</legend>
            The term query optimization specifies an efficient execution plan for evaluating a query that has the least estimated cost.         
            There are many benefits of query optimization:
            <UL>
                <li> It reduces the time and space complexity </li>
                <li> More queries can be performed as due to optimization every query comparatively takes less time.</li>
                <li> User satisfaction as it will provide output fast </li>
            </UL>
            </fieldset>
       <fieldset>




            <legend> Normalization</legend>
            Normalization is a process of analysing the given relation schemas according to their functional dependencies. It is used to minimize redundancy and also used to minimize insertion, deletion and update distractions. 
            There most commonly used normal forms are:
            <UL>
                <li> First Normal Form(1NF) </li>
                <li>Second Normal Form(2NF).</li>
                <li>Third Normal Form(3NF) </li>
                <LI>Boyce & Codd Normal Form(BCNF)</LI>
            </UL>
        </fieldset>
               <fieldset>
                    <legend> Denormalization</legend>
                    Denormalization is the process of boosting up database performance and adding of redundant data which helps to get rid of complex data. Denormalization is a part of database optimization technique. This process is used to avoid the use of complex and costly joins.
       
        </fieldset>
         <fieldset>
         <legend> Functional Dependency</legend>
         Functional Dependency is the starting point of normalization. It exists when a relation between two attributes allow you to determine the corresponding attribute's value uniquely. It is written as A->B which means B is functionally dependent on A.  <legend> Type Of DML</legend>
                </fieldset>
        </div>

        <div class="container" id="div7">



            <fieldset>
                <legend> Extension And Intension</legend>
            
                Extension: The Extension is the number of tuples present in a table at any instance. It changes as the tuples are created, updated and destroyed. <BR>
                
                    Intension: Intension is also known as Data Schema and defined as the description of the database, which is specified during database design and is expected to remain unchanged.
                </fieldset>
            
           <fieldset>
             <legend>Data Independence</legend>
            
             Data independence specifies that "the application is independent of the storage structure and access strategy of data."<BR>              
                There are two types of Data Independence:
                Physical Data Independence: Physical data is the data stored in the database. <BR>
                    Logical Data Independence: Logical data in the data about the database. 
                </fieldset>
                    <fieldset>
                <legend> 1NF,2NF,  3NF</legend>
              1NF- 1NF is the First Normal Form. It is the simplest type of normalization that you can implement in a database. <br>
             2NF-2NF is the Second Normal Form. Every non-prime attribute is fully functionally dependent on the primary key, i.e., every non-key attribute should be dependent   on the primary key in such a way that if any key element is deleted, then even the non_key element will still be saved in the database. <br>
             3nf-3NF stands for Third Normal Form.<br>
              <ul>
                <li> It is in second normal form. </li>
                <li> There is no transitive functional dependency. </li>
                <li> For example: X->Z </li> <br>
            </ul>
                Where:<br>
                X->Y<br>
                Y does not -> X <br>
                Y->Z so, X->Z <br>
             
            </fieldset>
                    <fieldset>

                <legend> BCNF</legend>
                BCMF stands for Boyce-Codd Normal Form. It is an advanced version of 3NF, so it is also referred to as 3.5NF. BCNF is stricter than 3NF.

           
                </fieldset>
                   <fieldset>
                        <legend> DELETE Command And TRUNCATE Command</legend>
                        DELETE command:<BR>
                            <ul>
                                <li> DELETE command delete only those rows which are specified with the WHERE clause. </li>
                                <li> DELETE command can be rolled back. </li>
                                <li> DELETE command maintain a log, that's why it is slow. </li> <br>
                                <li> DELETE use row lock while performing DELETE function. </li>
                            </ul> 
                            
                            TRUNCATE command:<BR>
                                <ul>
                                    <li> The TRUNCATE command removes all the rows from the table. </li>
                                    <li> The TRUNCATE command cannot be rolled back. </li>
                                    <li> The TRUNCATE command doesn't maintain a log. That's why it is fast. </li> <br>
                                    <li> TRUNCATE use table log while performing the TRUNCATE function. </li>
                                </ul> 
                        
                        
                        
                        
                        
                        </fieldset>
             <fieldset>
             <legend> 2-Tier Architecture</legend>
             The 2-Tier architecture is the same as basic client-server. In the two-tier architecture, applications on the client end can directly communicate with the database at the server side.     <BR>
            <img src="../images/PHOTO.png"  >
            
            </fieldset>
           
     
            



                <fieldset>
                    <legend> 3-Tier Architecture</legend>
                
                    The 3-Tier architecture contains another layer between the client and server.<br>
                    <img src="../images/sphoto1.png">

                
                </fieldset>
                
               <fieldset>
                 <legend>Shared Lock and Exclusive Lock</legend>
                
                 Shared lock: Shared lock is required for reading a data item. In the shared lock, many transactions may hold a lock on the same data item. <BR>  
                    Exclusive lock: When any transaction is about to perform the write operation, then the lock on the data item is an exclusive lock.</fieldset>
                    
                    <fieldset>
                    <legend> Types Of Keys</legend>
                    There are following types of keys:
                    Primary key: The Primary key is an attribute in a table that can uniquely identify each record in a table. It is compulsory for every table.<br>

                    Candidate key: The Candidate key is an attribute or set of an attribute which can uniquely identify a tuple. The Primary key can be selected from these attributes.<br>

                    Super key: The Super key is a set of attributes which can uniquely identify a tuple. Super key is a superset of the candidate key.<br>

                    Foreign key: The Foreign key is a primary key from one table, which has a relationship with another table. It acts as a cross-reference between tables.<br>
                    </fieldset>

                   </div>
                
                   <img src="../images/photo6.png">
                   <div class="container" id="div8">
                    <h1>DATA TABLE</h1>
                   
                        <fieldset>
    
                    <legend> Table â€“ EmployeeDetails</legend>
                   <img src="../images/photo2.png">
                    
                                
                            <img src="../images/photo2.png">
                            
                           

                            </fieldset>
                 <fieldset>
                 <legend> SQL QUERIES</legend>

                 <b>1. Write an SQL query to fetch the EmpId and FullName of all the employees working under the Manager with id â€“ â€˜986â€™.</b><br>
                           
                  <i><b><u>Query-></u></b></i><br>
                  Select EmpId, fullname<br>
                  from EmployeeDetails<br>

                           where managerid = 986;<br>

                           <b> 2.Write an SQL query to fetch the different projects available from the EmployeeSalary table.</b> <br>
                           <i><b><u>Query-></u></b></i><br>
                           Select distinct(project)<br>
                           From EmployeeSalary;<br>
                         <b>3.   Write an SQL query to find the maximum, minimum, and average salary of the employees</b><br>
                         <i><b><u>Query-</u></b></i>><br>
                         Select max(Salary), <br>
                         min(Salary), <br>
                         avg(Salary) <br>
                         from EmployeeSalary;<br>


                        <b> 4. Write an SQL query to find the employee id whose salary lies in the range of 9000 and 15000.</b><br>
                        <i><b><u>Query-></u></b></i><br>
                        Select EmpId, salary<br>

from EmployeeSalary<br>
Where salary between 9000 and 15000;<br>
               
                </fieldset>
                </div>
         
         
       
               

</body>
</html>

